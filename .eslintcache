[{"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\index.tsx":"1","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\reportWebVitals.ts":"2","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\App.tsx":"3","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\RandomJoke\\RandomJoke.tsx":"4","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\RandomJokeReducer.ts":"5","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\api\\api.ts":"6","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\store.ts":"7","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\JokeCategories\\JokeCategories.tsx":"8","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\JokeCategoriesReducer.ts":"9","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\FreeTextSearching\\FreeTextSearching.tsx":"10","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\FreeTextSearchingReducer.ts":"11","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\index.tsx":"12","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\reportWebVitals.ts":"13","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\store.ts":"14","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\App.tsx":"15","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\RandomJokeReducer.ts":"16","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\JokeCategoriesReducer.ts":"17","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\FreeTextSearchingReducer.ts":"18","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\RandomJoke\\RandomJoke.tsx":"19","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\JokeCategories\\JokeCategories.tsx":"20","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\FreeTextSearching\\FreeTextSearching.tsx":"21","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\api\\api.ts":"22","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\RandomJokeSaga.ts":"23","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\index.ts":"24","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\FreeTextSearchingSaga.ts":"25","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\JokeCategoriesSaga.ts":"26"},{"size":643,"mtime":1612196207384,"results":"27","hashOfConfig":"28"},{"size":425,"mtime":1612123297654,"results":"29","hashOfConfig":"28"},{"size":464,"mtime":1612380160016,"results":"30","hashOfConfig":"28"},{"size":678,"mtime":1612299907246,"results":"31","hashOfConfig":"28"},{"size":982,"mtime":1612199631939,"results":"32","hashOfConfig":"28"},{"size":1623,"mtime":1612470797350,"results":"33","hashOfConfig":"28"},{"size":671,"mtime":1612456267607,"results":"34","hashOfConfig":"28"},{"size":1404,"mtime":1612379183175,"results":"35","hashOfConfig":"28"},{"size":1813,"mtime":1612351558654,"results":"36","hashOfConfig":"28"},{"size":1245,"mtime":1612472644829,"results":"37","hashOfConfig":"28"},{"size":1205,"mtime":1612472563797,"results":"38","hashOfConfig":"28"},{"size":664,"mtime":1612545248935,"results":"39","hashOfConfig":"40"},{"size":440,"mtime":1612545248936,"results":"41","hashOfConfig":"40"},{"size":811,"mtime":1612610971833,"results":"42","hashOfConfig":"40"},{"size":590,"mtime":1613680373324,"results":"43","hashOfConfig":"40"},{"size":1768,"mtime":1613676187733,"results":"44","hashOfConfig":"40"},{"size":1975,"mtime":1613162605764,"results":"45","hashOfConfig":"40"},{"size":1556,"mtime":1613162576669,"results":"46","hashOfConfig":"40"},{"size":2330,"mtime":1613574255466,"results":"47","hashOfConfig":"40"},{"size":2984,"mtime":1613665744262,"results":"48","hashOfConfig":"40"},{"size":4367,"mtime":1613679727632,"results":"49","hashOfConfig":"40"},{"size":1596,"mtime":1613596689663,"results":"50","hashOfConfig":"40"},{"size":683,"mtime":1613330779310,"results":"51","hashOfConfig":"40"},{"size":473,"mtime":1613330680703,"results":"52","hashOfConfig":"40"},{"size":642,"mtime":1613162449934,"results":"53","hashOfConfig":"40"},{"size":965,"mtime":1613159659788,"results":"54","hashOfConfig":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},"1u1yv0w",{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"57"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"5wcow7",{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"83"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"83"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"83"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\index.tsx",[],["116","117"],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\reportWebVitals.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\App.tsx",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\RandomJoke\\RandomJoke.tsx",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\RandomJokeReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\api\\api.ts",["118","119"],"import axios from \"axios\";\r\nimport {type} from \"os\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.chucknorris.io/jokes/',\r\n    withCredentials: true\r\n});\r\n\r\n\r\nexport const randomJokesAPI = {\r\n    getRandomJoke() {\r\n        return instance.get<RandomJokeResponseType>(`random`)\r\n            .then((res) => {\r\n                return res.data.value\r\n            })\r\n    },\r\n    getJokeCategories() {\r\n        return instance.get<CategoriesResponseType>(`categories`)\r\n            .then((res) => {\r\n                return res.data\r\n            })\r\n    },\r\n    getJokeCategory(category: string) {\r\n        return instance.get<getJokeCategorieResponseType>(`random?category=${category}`)\r\n            .then((res) => {\r\n                return res.data.value\r\n            })\r\n    },\r\n    searchFreeText(text: string) {\r\n        const promise = instance.get<r[]>(`search?query=${text}`)\r\n        return promise\r\n    }\r\n};\r\n\r\n\r\ntype RandomJokeResponseType = {\r\n    \"categories\": [],\r\n    \"created_at\": string,\r\n    \"icon_url\": string,\r\n    \"id\": string,\r\n    \"updated_at\": string,\r\n    \"url\": string,\r\n    \"value\": string\r\n}\r\n\r\ntype CategoriesResponseType = {}\r\n\r\ntype getJokeCategorieResponseType = {\r\n    value: string\r\n}\r\n\r\ntype freeTextSearchingResponseType = {\r\n    config: {}\r\n    data: freeSearchingDataType\r\n    headers: {}\r\n    request: any\r\n    status: number\r\n    statusText: string\r\n}\r\n\r\n\r\ntype freeSearchingDataType = {\r\n    result: []\r\n    total: number\r\n}\r\n\r\ntype r = {\r\n    created_at: string\r\n    icon_url: string\r\n    id: string\r\n    updated_at: string\r\n    url: string\r\n    value: string\r\n}",["120","121"],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\store.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\JokeCategories\\JokeCategories.tsx",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\JokeCategoriesReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\FreeTextSearching\\FreeTextSearching.tsx",["122","123"],"import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\nimport {setFreeEnteredTextTC} from \"../../Redux/FreeTextSearchingReducer\";\r\nimport {r} from \"../../api/api\";\r\n\r\n\r\ntype searchingResultType = {\r\n    created_at: string\r\n    icon_url: string\r\n    id: string\r\n    updated_at: string\r\n    url: string\r\n    value: string\r\n}\r\n\r\ntype searchingResultArrayType = Array<searchingResultType>\r\n\r\nexport function FreeTextSearching() {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const list = useSelector<AppRootStateType, any>(state => state.FreeTextSearchingReducer.jokesList)\r\n    console.log(list);\r\n\r\n\r\n    let [freeText, setFreeText] = useState('')\r\n\r\n    const w = (value: string) => {\r\n        setFreeText(value)\r\n    }\r\n\r\n    const submitHandler = () => {\r\n        dispatch(setFreeEnteredTextTC(freeText))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <input onChange={(e) => w(e.currentTarget.value)} type=\"text\"/>\r\n            <button onClick={submitHandler}>Enter some Text</button>\r\n            {/*{list.map((el: r) => {*/}\r\n            {/*   return <div>{el.value}</div>*/}\r\n            {/*})}*/}\r\n        </div>\r\n    );\r\n}","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\FreeTextSearchingReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\index.tsx",[],["124","125"],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\reportWebVitals.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\store.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\App.tsx",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\RandomJokeReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\JokeCategoriesReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\FreeTextSearchingReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\RandomJoke\\RandomJoke.tsx",["126","127"],"import React, {useEffect, useState} from 'react';\r\nimport './RandomJoke';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\nimport {setAsyncMainImageAC, setAsyncRandomJokeAC} from \"../../Redux/RandomJokeReducer\";\r\nimport styled from \"styled-components\"\r\nimport arrow from \"../../essets/img/arrowLeft (1) (1) (1).gif\"\r\n\r\nconst Main = styled.div`\r\ndisplay: flex;\r\nwidth: 1200px;\r\nheight: 200px;\r\nborder: 1px solid darkslateblue;\r\nbackground-color: darkslateblue;\r\ntext-align: center;\r\nbox-shadow: 1px 6px 36px 7px;\r\n`\r\nconst MainImage = styled.div`\r\nwidth: 50px;\r\nheight: 50px;\r\ndisplay: block;\r\nmargin: 0 auto;\r\n`\r\nconst RandomJokeButton = styled.button`\r\ntext-align: center;\r\nbackground-color: chocolate;\r\nborder-radius: 7px;\r\n:active, \r\n:focus {\r\n    outline: none;\r\n}\r\ncolor: aliceblue;\r\n`\r\nconst ContentWrap = styled.div`\r\nwidth: 150px;\r\nheight: 200px;\r\nposition: relative;\r\n`\r\nconst TextJokeWrap = styled.div`\r\nwidth: 1050px;\r\nheight: 200px;\r\nposition: relative;\r\n`\r\nconst TextJoke = styled.div`\r\nwidth: 1000px;\r\nheight: 20px;\r\ndisplay: table;\r\nposition: absolute;\r\nleft: 0;\r\nright: 0;\r\ntop: 0;\r\nbottom: 0;\r\nmargin: auto;\r\ncolor: aliceblue;\r\n`\r\nconst ImageButtonWrap = styled.div`\r\nwidth: 150px;\r\nheight: 75px;\r\nposition: absolute;\r\nleft: 0;\r\nright: 0;\r\ntop: 0;\r\nbottom: 0;\r\nmargin: auto;\r\n`\r\n\r\n\r\nexport function RandomJoke() {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setAsyncMainImageAC())\r\n    }, [dispatch])\r\n\r\n\r\n    const setRandomJokeHandle = () => {\r\n        dispatch(setAsyncRandomJokeAC())\r\n    }\r\n\r\n    const joke = useSelector<AppRootStateType, any>(state => state.RandomJokeReducer.value)\r\n    const mainImage = useSelector<AppRootStateType, any>(state => state.RandomJokeReducer.mainImage)\r\n\r\n    return (\r\n        <Main>\r\n            <ContentWrap>\r\n                <ImageButtonWrap>\r\n                    <MainImage as='img' src={mainImage} alt=\"mainImage\"/>\r\n                    <RandomJokeButton onClick={setRandomJokeHandle}>Random Joke</RandomJokeButton>\r\n                </ImageButtonWrap>\r\n            </ContentWrap>\r\n            <TextJokeWrap>\r\n                <TextJoke>{joke ? joke : <><img src={arrow}/><div>Click the button</div></>}</TextJoke>\r\n            </TextJokeWrap>\r\n        </Main>\r\n    );\r\n}\r\n\r\n","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\JokeCategories\\JokeCategories.tsx",["128"],"import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\nimport {\r\n    setAsyncCategoryAC,\r\n    setAsyncJokeCategoriesAC,\r\n} from \"../../Redux/JokeCategoriesReducer\";\r\nimport styled from \"styled-components\"\r\nimport arrow from \"../../essets/img/arrowLeft (1) (1) (1).gif\";\r\n\r\n\r\nconst Main = styled.div`\r\ndisplay: flex;\r\nwidth:1200px;\r\nheight: 300px;\r\nmargin: 0 auto;\r\nbackground-color: darkslateblue;\r\nborder: 1px solid darkslateblue;\r\nbox-shadow: 1px 6px 36px 7px;\r\n`\r\n\r\nconst SelectButton = styled.div`\r\nwidth: 200px;\r\nheight: 300px;\r\nposition: relative;\r\n`\r\n\r\nconst SelectButtonWrap = styled.div`\r\nwidth: 200px;\r\nheight: 66px;\r\nposition: absolute;\r\nleft: 0;\r\nright: 0;\r\ntop: 0;\r\nbottom: 0;\r\nmargin: auto;\r\n`\r\n\r\n\r\nconst TextJokeWrap = styled.div`\r\nwidth: 1000px;\r\nposition: relative;\r\n`\r\n\r\nconst TextJoke = styled.div`\r\nwidth: 900px;\r\nheight: 20px;\r\ntext-align: center;\r\nposition: absolute;\r\nleft: 0;\r\nright: 0;\r\ntop: 0;\r\nbottom: 0;\r\nmargin: auto;\r\ncolor: aliceblue;\r\n`\r\n\r\nconst NewSelect = styled.select`\r\ndisplay: block;\r\nwidth: 100px;\r\nheight: 30px;\r\nfont-size: 17px;\r\nmargin: 0 auto;\r\nbackground-color: aliceblue;\r\nborder-radius: 10px;\r\n:active, \r\n:focus {\r\n    outline: none;\r\n`\r\n\r\nconst NewButton = styled.button`\r\nborder-radius: 10px;\r\nbackground-color: chocolate;\r\ncolor: aliceblue;\r\n:active, \r\n:focus {\r\n    outline: none;\r\n}\r\n`\r\n\r\nexport function JokeCategories() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setAsyncJokeCategoriesAC())\r\n    }, [dispatch])\r\n\r\n    let [currentCat, setCurrentCat] = useState('')\r\n\r\n    const jokeCategories = useSelector<AppRootStateType, any>(state =>\r\n        state.JokeCategoriesReducer.categories)\r\n\r\n    const jokeAccordingToCat = useSelector<AppRootStateType, any>(state => state.JokeCategoriesReducer.value)\r\n\r\n    const getCurrentCategory = (c: ChangeEvent<HTMLSelectElement>) => {\r\n\r\n        dispatch(setAsyncCategoryAC(c.target.value))\r\n        setCurrentCat(c.target.value)\r\n    }\r\n\r\n    const changeJokeOfCategory = () => {\r\n        dispatch(setAsyncCategoryAC(currentCat))\r\n    }\r\n\r\n    return (\r\n        <Main className=\"App\">\r\n            <SelectButton>\r\n                <SelectButtonWrap>\r\n                    <NewSelect onChange={getCurrentCategory}>\r\n                        {jokeCategories.map((c: any, index: number) => {\r\n                            return <option value={c} key={index}>{c}</option>\r\n                        })}\r\n                    </NewSelect>\r\n                    <NewButton onClick={changeJokeOfCategory}>Enjoy by other jokes of this category</NewButton>\r\n                </SelectButtonWrap>\r\n            </SelectButton>\r\n            <TextJokeWrap>\r\n                <TextJoke>{jokeAccordingToCat ? jokeAccordingToCat : <><img src={arrow}/><div>Choose the category</div></>}</TextJoke>\r\n            </TextJokeWrap>\r\n        </Main>\r\n    );\r\n}\r\n\r\n","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\FreeTextSearching\\FreeTextSearching.tsx",["129","130"],"import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\nimport {setFreeEnteredAsyncTextAC} from \"../../Redux/FreeTextSearchingReducer\";\r\nimport {r} from \"../../api/api\";\r\nimport styled from \"styled-components\"\r\n\r\n\r\nconst Main = styled.div`\r\ndisplay: flex;\r\nwidth:1200px;\r\nheight: 100%;\r\nmargin: 0 auto;\r\nbackground-color: darkslateblue;\r\nborder: 1px solid darkslateblue;\r\nbox-shadow: 1px 6px 36px 7px;\r\n`\r\nconst TextJokesWrap = styled.div`\r\nwidth: 1000px;\r\ncolor: aliceblue;\r\nmargin-top: 40px;\r\n`\r\nconst TextJoke = styled.div`\r\nwidth: 900px;\r\ntext-align: center;\r\npadding: 10px;\r\n`\r\nconst InputButtonWrap = styled.div`\r\nwidth: 200px;\r\nheight: 100%;\r\nposition: relative;\r\n`\r\nconst Wrap = styled.div`\r\nposition: absolute;\r\nleft: 0;\r\nright: 0;\r\ntop: 117px;\r\nbottom: 0;\r\nmargin: auto;\r\n`\r\nconst NewInput = styled.input`\r\nheight: 30px;\r\nborder-radius: 10px;\r\nbackground-color: aliceblue;\r\n:active, \r\n:focus {\r\n    outline: none;\r\n`\r\nconst NewButton = styled.button`\r\ntext-align: center;\r\nbackground-color: chocolate;\r\nborder-radius: 7px;\r\n:active, \r\n:focus {\r\n    outline: none;\r\n}\r\n    color: aliceblue;\r\n    margin: 0 auto;\r\n`\r\nconst PageNumbers = styled.span`\r\nmargin-right: 5px;\r\ncursor: pointer;\r\n`\r\nconst PaginationWrap = styled.div`\r\ndisplay: flex;\r\n`\r\n\r\n\r\nexport const FreeTextSearching = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const list = useSelector<AppRootStateType, any>(state => state.FreeTextSearchingReducer.jokesList)\r\n    console.log(list)\r\n    let [freeText, setFreeText] = useState('')\r\n\r\n    const FreeTextHandler = (value: string) => {\r\n        setFreeText(value)\r\n    }\r\n\r\n    const submitHandler = () => {\r\n        dispatch(setFreeEnteredAsyncTextAC(freeText))\r\n    }\r\n    let total: any = []\r\n    let pageCount: number = 0\r\n    let pages = []\r\n    let portionSize = 10\r\n    let leftEdge: number\r\n    let rightEdge: number\r\n    let jokeAmount = 5\r\n\r\n    for (let i: number = 0; i <= list.length; i++) {\r\n        total.push(i)\r\n        pageCount = total.length / portionSize\r\n    }\r\n\r\n    for (let i: number = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const getCurrentPage = (page: number) => {\r\n        setPortionNumber(page)\r\n        setPageNum(page)\r\n    }\r\n\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    leftEdge = (portionNumber - 1) * portionSize + 1\r\n    rightEdge = portionNumber * portionSize\r\n\r\nlet [pageNum, setPageNum] = useState(1)\r\n    let leftEdgeJokePortion = (pageNum - 1) * jokeAmount + 1\r\n    let rightEdgeJokePortion = pageNum * jokeAmount\r\n\r\n\r\n    return (\r\n        <Main className=\"App\">\r\n            <InputButtonWrap>\r\n                <Wrap>\r\n                    <NewInput onChange={(e) => FreeTextHandler(e.currentTarget.value)} type=\"text\"/>\r\n                    <NewButton onClick={submitHandler}>Enter some Text</NewButton>\r\n                </Wrap>\r\n            </InputButtonWrap>\r\n            <TextJokesWrap>\r\n                <PaginationWrap>\r\n                    {portionNumber > 1 && <button onClick={() => {\r\n                        setPortionNumber(portionNumber - 1)\r\n                    }}>prev</button>}\r\n                    <div>\r\n                        {pages.filter((p) => {\r\n                            if (p >= leftEdge && p <= rightEdge) {\r\n                                return p\r\n                            }\r\n                        }).map(p => <PageNumbers onClick={() => {\r\n                            getCurrentPage(p)\r\n                        }}>{p}</PageNumbers>)}\r\n                    </div>\r\n                    {pageCount > portionNumber && <button onClick={() => {\r\n                        setPortionNumber(portionNumber + 1)\r\n                    }}>next</button>}\r\n                </PaginationWrap>\r\n                {list.filter((el: r, index: number) => {\r\n                    if (index >=leftEdgeJokePortion && index <= rightEdgeJokePortion) {\r\n                        return el\r\n                    }\r\n                }).map((el: r, index: number) => {\r\n                    return <TextJoke>\r\n                        <div key={index}>{el.value}</div>\r\n                        <div>----------------------------------</div>\r\n                    </TextJoke>\r\n                })}\r\n            </TextJokesWrap>\r\n        </Main>\r\n    );\r\n})","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\api\\api.ts",[],["131","132"],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\RandomJokeSaga.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\index.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\FreeTextSearchingSaga.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\JokeCategoriesSaga.ts",[],{"ruleId":"133","replacedBy":"134"},{"ruleId":"135","replacedBy":"136"},{"ruleId":"137","severity":1,"message":"138","line":2,"column":9,"nodeType":"139","messageId":"140","endLine":2,"endColumn":13},{"ruleId":"137","severity":1,"message":"141","line":51,"column":6,"nodeType":"139","messageId":"140","endLine":51,"endColumn":35},{"ruleId":"133","replacedBy":"142"},{"ruleId":"135","replacedBy":"143"},{"ruleId":"137","severity":1,"message":"144","line":5,"column":9,"nodeType":"139","messageId":"140","endLine":5,"endColumn":10},{"ruleId":"137","severity":1,"message":"145","line":17,"column":6,"nodeType":"139","messageId":"140","endLine":17,"endColumn":30},{"ruleId":"133","replacedBy":"146"},{"ruleId":"135","replacedBy":"147"},{"ruleId":"137","severity":1,"message":"148","line":1,"column":27,"nodeType":"139","messageId":"140","endLine":1,"endColumn":35},{"ruleId":"149","severity":1,"message":"150","line":92,"column":44,"nodeType":"151","endLine":92,"endColumn":62},{"ruleId":"149","severity":1,"message":"150","line":119,"column":72,"nodeType":"151","endLine":119,"endColumn":90},{"ruleId":"152","severity":1,"message":"153","line":129,"column":43,"nodeType":"154","messageId":"155","endLine":129,"endColumn":45},{"ruleId":"152","severity":1,"message":"153","line":141,"column":53,"nodeType":"154","messageId":"155","endLine":141,"endColumn":55},{"ruleId":"133","replacedBy":"156"},{"ruleId":"135","replacedBy":"157"},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"@typescript-eslint/no-unused-vars","'type' is defined but never used.","Identifier","unusedVar","'freeTextSearchingResponseType' is defined but never used.",["158"],["159"],"'r' is defined but never used.","'searchingResultArrayType' is defined but never used.",["158"],["159"],"'useState' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["158"],["159"],"no-global-assign","no-unsafe-negation"]