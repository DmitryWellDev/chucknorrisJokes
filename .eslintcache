[{"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\index.tsx":"1","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\reportWebVitals.ts":"2","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\App.tsx":"3","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\RandomJoke\\RandomJoke.tsx":"4","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\RandomJokeReducer.ts":"5","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\api\\api.ts":"6","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\store.ts":"7","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\JokeCategories\\JokeCategories.tsx":"8","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\JokeCategoriesReducer.ts":"9","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\FreeTextSearching\\FreeTextSearching.tsx":"10","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\FreeTextSearchingReducer.ts":"11","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\index.tsx":"12","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\reportWebVitals.ts":"13","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\store.ts":"14","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\App.tsx":"15","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\RandomJokeReducer.ts":"16","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\JokeCategoriesReducer.ts":"17","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\FreeTextSearchingReducer.ts":"18","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\RandomJoke\\RandomJoke.tsx":"19","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\JokeCategories\\JokeCategories.tsx":"20","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\FreeTextSearching\\FreeTextSearching.tsx":"21","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\api\\api.ts":"22","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\RandomJokeSaga.ts":"23","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\index.ts":"24","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\FreeTextSearchingSaga.ts":"25","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\JokeCategoriesSaga.ts":"26","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\FreeTextSearching\\styled.ts":"27","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\PaginationPagesReducer.ts":"28","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\PaginationPages\\PaginationPages.tsx":"29","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\PaginationPages\\styled.ts":"30","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\JokeCategories\\styled.ts":"31","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\RandomJoke\\styled.ts":"32"},{"size":643,"mtime":1612196207384,"results":"33","hashOfConfig":"34"},{"size":425,"mtime":1612123297654,"results":"35","hashOfConfig":"34"},{"size":464,"mtime":1612380160016,"results":"36","hashOfConfig":"34"},{"size":678,"mtime":1612299907246,"results":"37","hashOfConfig":"34"},{"size":982,"mtime":1612199631939,"results":"38","hashOfConfig":"34"},{"size":1623,"mtime":1612470797350,"results":"39","hashOfConfig":"34"},{"size":671,"mtime":1612456267607,"results":"40","hashOfConfig":"34"},{"size":1404,"mtime":1612379183175,"results":"41","hashOfConfig":"34"},{"size":1813,"mtime":1612351558654,"results":"42","hashOfConfig":"34"},{"size":1245,"mtime":1612472644829,"results":"43","hashOfConfig":"34"},{"size":1205,"mtime":1612472563797,"results":"44","hashOfConfig":"34"},{"size":664,"mtime":1612545248935,"results":"45","hashOfConfig":"46"},{"size":440,"mtime":1612545248936,"results":"47","hashOfConfig":"46"},{"size":930,"mtime":1614011866389,"results":"48","hashOfConfig":"46"},{"size":590,"mtime":1613680373324,"results":"49","hashOfConfig":"46"},{"size":1768,"mtime":1613676187733,"results":"50","hashOfConfig":"46"},{"size":1975,"mtime":1613162605764,"results":"51","hashOfConfig":"46"},{"size":1531,"mtime":1613840043274,"results":"52","hashOfConfig":"46"},{"size":1442,"mtime":1614503270652,"results":"53","hashOfConfig":"46"},{"size":2270,"mtime":1614503019724,"results":"54","hashOfConfig":"46"},{"size":3906,"mtime":1614507490679,"results":"55","hashOfConfig":"46"},{"size":1562,"mtime":1614442742681,"results":"56","hashOfConfig":"46"},{"size":683,"mtime":1613330779310,"results":"57","hashOfConfig":"46"},{"size":473,"mtime":1613330680703,"results":"58","hashOfConfig":"46"},{"size":642,"mtime":1613162449934,"results":"59","hashOfConfig":"46"},{"size":965,"mtime":1613159659788,"results":"60","hashOfConfig":"46"},{"size":2204,"mtime":1614539135387,"results":"61","hashOfConfig":"46"},{"size":775,"mtime":1614011866418,"results":"62","hashOfConfig":"46"},{"size":2704,"mtime":1614507764001,"results":"63","hashOfConfig":"46"},{"size":221,"mtime":1614506546364,"results":"64","hashOfConfig":"46"},{"size":1138,"mtime":1614502792281,"results":"65","hashOfConfig":"46"},{"size":1066,"mtime":1614503270667,"results":"66","hashOfConfig":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"1u1yv0w",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"69"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"5wcow7",{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"95"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"95"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"95"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\index.tsx",[],["139","140"],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\reportWebVitals.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\App.tsx",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\RandomJoke\\RandomJoke.tsx",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\RandomJokeReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\api\\api.ts",["141","142"],"import axios from \"axios\";\r\nimport {type} from \"os\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.chucknorris.io/jokes/',\r\n    withCredentials: true\r\n});\r\n\r\n\r\nexport const randomJokesAPI = {\r\n    getRandomJoke() {\r\n        return instance.get<RandomJokeResponseType>(`random`)\r\n            .then((res) => {\r\n                return res.data.value\r\n            })\r\n    },\r\n    getJokeCategories() {\r\n        return instance.get<CategoriesResponseType>(`categories`)\r\n            .then((res) => {\r\n                return res.data\r\n            })\r\n    },\r\n    getJokeCategory(category: string) {\r\n        return instance.get<getJokeCategorieResponseType>(`random?category=${category}`)\r\n            .then((res) => {\r\n                return res.data.value\r\n            })\r\n    },\r\n    searchFreeText(text: string) {\r\n        const promise = instance.get<r[]>(`search?query=${text}`)\r\n        return promise\r\n    }\r\n};\r\n\r\n\r\ntype RandomJokeResponseType = {\r\n    \"categories\": [],\r\n    \"created_at\": string,\r\n    \"icon_url\": string,\r\n    \"id\": string,\r\n    \"updated_at\": string,\r\n    \"url\": string,\r\n    \"value\": string\r\n}\r\n\r\ntype CategoriesResponseType = {}\r\n\r\ntype getJokeCategorieResponseType = {\r\n    value: string\r\n}\r\n\r\ntype freeTextSearchingResponseType = {\r\n    config: {}\r\n    data: freeSearchingDataType\r\n    headers: {}\r\n    request: any\r\n    status: number\r\n    statusText: string\r\n}\r\n\r\n\r\ntype freeSearchingDataType = {\r\n    result: []\r\n    total: number\r\n}\r\n\r\ntype r = {\r\n    created_at: string\r\n    icon_url: string\r\n    id: string\r\n    updated_at: string\r\n    url: string\r\n    value: string\r\n}",["143","144"],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\store.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\JokeCategories\\JokeCategories.tsx",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\JokeCategoriesReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Conponents\\FreeTextSearching\\FreeTextSearching.tsx",["145","146"],"import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\nimport {setFreeEnteredTextTC} from \"../../Redux/FreeTextSearchingReducer\";\r\nimport {r} from \"../../api/api\";\r\n\r\n\r\ntype searchingResultType = {\r\n    created_at: string\r\n    icon_url: string\r\n    id: string\r\n    updated_at: string\r\n    url: string\r\n    value: string\r\n}\r\n\r\ntype searchingResultArrayType = Array<searchingResultType>\r\n\r\nexport function FreeTextSearching() {\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const list = useSelector<AppRootStateType, any>(state => state.FreeTextSearchingReducer.jokesList)\r\n    console.log(list);\r\n\r\n\r\n    let [freeText, setFreeText] = useState('')\r\n\r\n    const w = (value: string) => {\r\n        setFreeText(value)\r\n    }\r\n\r\n    const submitHandler = () => {\r\n        dispatch(setFreeEnteredTextTC(freeText))\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <input onChange={(e) => w(e.currentTarget.value)} type=\"text\"/>\r\n            <button onClick={submitHandler}>Enter some Text</button>\r\n            {/*{list.map((el: r) => {*/}\r\n            {/*   return <div>{el.value}</div>*/}\r\n            {/*})}*/}\r\n        </div>\r\n    );\r\n}","D:\\stady\\js\\React\\ChuckNorrisJokes\\src\\Redux\\FreeTextSearchingReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\index.tsx",[],["147","148"],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\reportWebVitals.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\store.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\App.tsx",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\RandomJokeReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\JokeCategoriesReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\FreeTextSearchingReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\RandomJoke\\RandomJoke.tsx",["149"],"import React, {useEffect} from 'react';\r\nimport './RandomJoke';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\nimport {setAsyncMainImageAC, setAsyncRandomJokeAC} from \"../../Redux/RandomJokeReducer\";\r\nimport arrow from \"../../essets/img/arrowLeft.gif\"\r\nimport {\r\n    Main,\r\n    ContentWrap,\r\n    ImageButtonWrap,\r\n    MainImage,\r\n    RandomJokeButton,\r\n    TextJokeWrap,\r\n    TextJoke\r\n} from \"./styled\";\r\n\r\n\r\nexport function RandomJoke() {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setAsyncMainImageAC())\r\n    }, [dispatch])\r\n\r\n\r\n    const setRandomJokeHandle = () => {\r\n        dispatch(setAsyncRandomJokeAC())\r\n    }\r\n\r\n    const joke = useSelector<AppRootStateType, any>(state => state.RandomJokeReducer.value)\r\n    const mainImage = useSelector<AppRootStateType, any>(state => state.RandomJokeReducer.mainImage)\r\n\r\n    return (\r\n        <Main>\r\n            <ContentWrap>\r\n                <ImageButtonWrap>\r\n                    <MainImage as='img' src={mainImage} alt=\"mainImage\"/>\r\n                    <RandomJokeButton onClick={setRandomJokeHandle}>Random Joke</RandomJokeButton>\r\n                </ImageButtonWrap>\r\n            </ContentWrap>\r\n            <TextJokeWrap>\r\n                <TextJoke>{joke ? joke : <><img src={arrow}/><div>Click the button</div></>}</TextJoke>\r\n            </TextJokeWrap>\r\n        </Main>\r\n    );\r\n}\r\n\r\n","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\JokeCategories\\JokeCategories.tsx",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\FreeTextSearching\\FreeTextSearching.tsx",["150"],"import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\nimport {setFreeEnteredAsyncTextAC} from \"../../Redux/FreeTextSearchingReducer\";\r\nimport {r} from \"../../api/api\";\r\nimport {\r\n    NewInput,\r\n    Main,\r\n    TextJokesWrap,\r\n    TextJoke,\r\n    InputButtonWrap,\r\n    Wrap,\r\n    NewButton,\r\n    MovingArrow,\r\n    MovingArrowWrap,\r\n    JokesWrap\r\n} from \"./styled\";\r\nimport arrow from \"../../essets/img/arrowLeft.gif\";\r\nimport {PaginationPages} from \"../PaginationPages/PaginationPages\";\r\n\r\nexport const FreeTextSearching = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const list = useSelector<AppRootStateType, any>(state => state.FreeTextSearchingReducer.jokesList)\r\n    const pageNumber = useSelector<AppRootStateType, any>(state => state.PaginationPagesReducer.currentPage)\r\n\r\n    let [freeText, setFreeText] = useState<string>('')\r\n    let [showError, setShowError] = useState<boolean>(false)\r\n\r\n    let amountOfItems: number = 5\r\n    let portionPagesSize: number = 10\r\n\r\n    const FreeTextHandler = (value: string) => {\r\n        setFreeText(value)\r\n    }\r\n\r\n    const submitHandler = () => {\r\n        if (freeText === '') {\r\n            setShowError(showError = true)\r\n        } else {\r\n            dispatch(setFreeEnteredAsyncTextAC(freeText))\r\n            setShowError(showError = false)\r\n        }\r\n    }\r\n\r\n    const setErrorOff = () => {\r\n        setShowError(showError = false)\r\n    }\r\n\r\n    //edges of jokes portions\r\n    let [pageNum, setPageNum] = useState(1)\r\n    let leftEdgeJokePortion = (pageNum - 1) * amountOfItems + 1\r\n    let rightEdgeJokePortion = pageNum * amountOfItems\r\n\r\n    const getPage = () => {\r\n        setPageNum(pageNumber)\r\n    }\r\n\r\n    return (\r\n        <Main className=\"App\">\r\n            {/*input-button block*/}\r\n            <InputButtonWrap>\r\n                <Wrap>\r\n                    <NewInput\r\n                        onFocus={setErrorOff}\r\n                        placeholder={showError ? 'Please write something' : ''}\r\n                        showError={showError}\r\n                        onChange={(e) => FreeTextHandler(e.currentTarget.value)} type=\"text\"/>\r\n                    <NewButton onClick={submitHandler}>{`Enter some Text`}</NewButton>\r\n                </Wrap>\r\n            </InputButtonWrap>\r\n            {/*-----------------------------------------------------------------------------------------------------------------*/}\r\n            {/*pagination block*/}\r\n            {list.length !== 0 ? <TextJokesWrap>\r\n                    <PaginationPages list={list}\r\n                                     getPage={getPage}\r\n                                     portionPagesSize={portionPagesSize}/>\r\n                    {/*-------------------------------------------------------------------------------------------------------------------------*/}\r\n                    {/*text-jokes block*/}\r\n                    <JokesWrap>\r\n                        {list.filter((el: r, index: number) => {\r\n                            if (index >= leftEdgeJokePortion && index <= rightEdgeJokePortion) {\r\n                                return el\r\n                            }\r\n                        }).map((el: r, index: number) => {\r\n                            return <TextJoke key={index}>\r\n                                <div>{el.value}</div>\r\n                                <div>----------------------------------</div>\r\n                            </TextJoke>\r\n                        })}\r\n                    </JokesWrap>\r\n                </TextJokesWrap>\r\n                : <MovingArrowWrap>\r\n                    <MovingArrow>\r\n                        <img alt={'arrow'} src={arrow}/>\r\n                        <div>Enter some text</div>\r\n                    </MovingArrow>\r\n                </MovingArrowWrap>}\r\n        </Main>\r\n    );\r\n}\r\n)","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\api\\api.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\RandomJokeSaga.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\index.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\FreeTextSearchingSaga.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\saga\\JokeCategoriesSaga.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\FreeTextSearching\\styled.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Redux\\PaginationPagesReducer.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\PaginationPages\\PaginationPages.tsx",["151","152"],"import React, {useState} from 'react';\r\nimport {PageNumbers, PaginationWrap, PageNumbersWrap} from \"../FreeTextSearching/styled\";\r\nimport {setCurrentPageAC} from \"../../Redux/PaginationPagesReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ButtonNext} from \"./styled\";\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\n\r\n\r\ntype PaginationPagesPropsType = {\r\n    list: []\r\n    getPage: () => void\r\n    portionPagesSize: number\r\n}\r\n\r\nexport const PaginationPages = React.memo((props: PaginationPagesPropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const pageNumber = useSelector<AppRootStateType, any>(state => state.PaginationPagesReducer.currentPage)\r\n\r\n    let pages = []\r\n    let total: any = []\r\n    let portionPagesSize = props.portionPagesSize\r\n    let pageCount: number = 0\r\n    let isShowButton = true\r\n\r\n    // edges of pagination portions\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftEdge = (portionNumber - 1) * portionPagesSize + 1\r\n    let rightEdge = portionNumber * portionPagesSize\r\n\r\n    for (let i: number = 0; i <= props.list.length; i++) {\r\n        total.push(i)\r\n        pageCount = Math.ceil(total.length / portionPagesSize)\r\n    }\r\n\r\n    for (let i: number = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const getCurrentPage = (page: number) => {\r\n        dispatch(setCurrentPageAC(page))\r\n    }\r\n\r\n    //hide button (next) in last page portion\r\n    if (pageCount >= leftEdge && pageCount <= rightEdge) {\r\n        isShowButton = false\r\n    }\r\n\r\n    return (\r\n        <PaginationWrap>\r\n            {portionNumber > 1 && <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}> {`prev`} </button>}\r\n            <PageNumbersWrap>\r\n                {pages.filter((p) => {\r\n                    if (p >= leftEdge && p <= rightEdge) {\r\n                        return p\r\n                    }\r\n                }).map((p, index) => {\r\n                    return <PageNumbers\r\n                        key={index}\r\n                        onClick={() => {\r\n                            getCurrentPage(p)\r\n                            props.getPage()\r\n                        }}\r\n                        isNumberClicked={pageNumber == p}\r\n                        isFirstPortion={portionNumber > 1}\r\n                    >{p}</PageNumbers>\r\n                })}\r\n            </PageNumbersWrap>\r\n            <ButtonNext\r\n                onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}\r\n                isShowButton={isShowButton}\r\n            >\r\n                {`next`}\r\n            </ButtonNext>\r\n        </PaginationWrap>\r\n    )\r\n})","D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\PaginationPages\\styled.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\JokeCategories\\styled.ts",[],"D:\\stady\\js\\React\\ChuckNorrisJokes_saga\\src\\Conponents\\RandomJoke\\styled.ts",[],{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":2,"column":9,"nodeType":"159","messageId":"160","endLine":2,"endColumn":13},{"ruleId":"157","severity":1,"message":"161","line":51,"column":6,"nodeType":"159","messageId":"160","endLine":51,"endColumn":35},{"ruleId":"153","replacedBy":"162"},{"ruleId":"155","replacedBy":"163"},{"ruleId":"157","severity":1,"message":"164","line":5,"column":9,"nodeType":"159","messageId":"160","endLine":5,"endColumn":10},{"ruleId":"157","severity":1,"message":"165","line":17,"column":6,"nodeType":"159","messageId":"160","endLine":17,"endColumn":30},{"ruleId":"153","replacedBy":"166"},{"ruleId":"155","replacedBy":"167"},{"ruleId":"168","severity":1,"message":"169","line":42,"column":44,"nodeType":"170","endLine":42,"endColumn":62},{"ruleId":"171","severity":1,"message":"172","line":82,"column":61,"nodeType":"173","messageId":"174","endLine":82,"endColumn":63},{"ruleId":"171","severity":1,"message":"172","line":55,"column":35,"nodeType":"173","messageId":"174","endLine":55,"endColumn":37},{"ruleId":"175","severity":1,"message":"176","line":66,"column":53,"nodeType":"177","messageId":"178","endLine":66,"endColumn":55},"no-native-reassign",["179"],"no-negated-in-lhs",["180"],"@typescript-eslint/no-unused-vars","'type' is defined but never used.","Identifier","unusedVar","'freeTextSearchingResponseType' is defined but never used.",["179"],["180"],"'r' is defined but never used.","'searchingResultArrayType' is defined but never used.",["179"],["180"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]