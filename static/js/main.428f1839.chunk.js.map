{"version":3,"sources":["Redux/RandomJokeReducer.ts","essets/img/arrowLeft.gif","Conponents/RandomJoke/styled.ts","Conponents/RandomJoke/RandomJoke.tsx","Redux/JokeCategoriesReducer.ts","Conponents/JokeCategories/styled.ts","Conponents/JokeCategories/JokeCategories.tsx","Redux/FreeTextSearchingReducer.ts","Conponents/FreeTextSearching/styled.ts","Redux/PaginationPagesReducer.ts","Conponents/PaginationPages/styled.ts","Conponents/PaginationPages/PaginationPages.tsx","Conponents/FreeTextSearching/FreeTextSearching.tsx","App.tsx","reportWebVitals.ts","api/api.ts","saga/RandomJokeSaga.ts","saga/FreeTextSearchingSaga.ts","saga/JokeCategoriesSaga.ts","saga/index.ts","Redux/store.ts","index.tsx"],"names":["SET_ASYNC_RANDOM_JOKE","SET_ASYNC_MAIN_IMAGE","initialState","value","mainImage","setRandomJokeAC","data","type","setMainImageAC","Main","styled","div","MainImage","RandomJokeButton","button","ContentWrap","TextJokeWrap","TextJoke","ImageButtonWrap","RandomJoke","dispatch","useDispatch","useEffect","joke","useSelector","state","RandomJokeReducer","as","src","alt","onClick","arrow","SET_ASYNC_JOKE_CATEGORIES","SET_ASYNC_CATEGORY","categories","setJokeCategoriesAC","setCategoryAC","setAsyncCategoryAC","SelectButton","SelectButtonWrap","NewSelect","select","NewButton","JokeCategories","useState","currentCat","setCurrentCat","jokeCategories","JokeCategoriesReducer","jokeAccordingToCat","className","onChange","c","target","map","index","SET_FREE_ENTERED_ASYNC_TEXT","jokesList","NewInput","input","showError","TextJokesWrap","InputButtonWrap","Wrap","PageNumbers","span","isNumberClicked","isFirstPortion","PaginationWrap","PageNumbersWrap","MovingArrowWrap","MovingArrow","JokesWrap","currentPage","ButtonNext","isShowButton","PaginationPages","React","memo","props","pageNumber","PaginationPagesReducer","pages","total","portionPagesSize","pageCount","portionNumber","setPortionNumber","leftEdge","rightEdge","i","list","length","push","Math","ceil","filter","p","page","setCurrentPageAC","getPage","FreeTextSearching","FreeTextSearchingReducer","freeText","setFreeText","setShowError","pageNum","setPageNum","leftEdgeJokePortion","rightEdgeJokePortion","onFocus","placeholder","e","currentTarget","el","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","randomJokesAPI","get","res","icon_url","category","text","randomJokeWorker","randomJokeWatcher","mainImageWorker","mainImageWatcher","call","put","takeEvery","FreeTextSearchingSagaWorker","FreeTextSearchingSagaWatcher","action","result","JokeCategoriesWorker","SetCategoryWorker","JokeCategoriesWatcher","SetCategoryWatcher","rootWatcher","all","sagaMiddleware","createSagaMiddleware","rootReducer","combineReducers","store","createStore","applyMiddleware","window","run","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0OACaA,EAAwB,wBAExBC,EAAuB,uBA2B9BC,EAAe,CACjBC,MAAO,GACPC,UAAW,IAoBFC,EAAkB,SAACC,GAC5B,MAAO,CAACC,KArDY,kBAqDWD,SAKtBE,EAAiB,SAACF,GAC3B,MAAO,CAACC,KAzDW,iBAyDWD,SC3DnB,MAA0B,sC,4sCCElC,IAAMG,EAAOC,IAAOC,IAAV,KASJC,EAAYF,IAAOC,IAAV,KAMTE,EAAmBH,IAAOI,OAAV,KAUhBC,EAAcL,IAAOC,IAAV,KAKXK,EAAeN,IAAOC,IAAV,KAKZM,EAAWP,IAAOC,IAAV,KAYRO,EAAkBR,IAAOC,IAAV,KChCrB,SAASQ,IACZ,IAAMC,EAAWC,cAEjBC,qBAAU,WACNF,EHyCG,CAACb,KAAMN,MGxCX,CAACmB,IAGJ,IAIMG,EAAOC,aAAmC,SAAAC,GAAK,OAAIA,EAAMC,kBAAkBvB,SAC3EC,EAAYoB,aAAmC,SAAAC,GAAK,OAAIA,EAAMC,kBAAkBtB,aAEtF,OACI,eAACK,EAAD,WACI,cAACM,EAAD,UACI,eAACG,EAAD,WACI,cAACN,EAAD,CAAWe,GAAG,MAAMC,IAAKxB,EAAWyB,IAAI,cACxC,cAAChB,EAAD,CAAkBiB,QAZN,WACxBV,EH8BG,CAACb,KAAMP,KGnBE,8BAGR,cAACgB,EAAD,UACI,cAACC,EAAD,UAAWM,GAAc,qCAAE,qBAAKK,IAAKG,IAAQ,6D,oBCtChDC,EAA4B,4BAE5BC,EAAqB,qBA+B5B/B,EAAe,CACjBgC,WAAY,GACZ/B,MAAO,IAsBEgC,EAAsB,SAAC7B,GAChC,MAAO,CAACC,KA3DgB,sBA2DWD,SAK1B8B,EAAgB,SAACjC,GAE1B,MAAO,CAACI,KAhES,eAgEWJ,UAEnBkC,EAAqB,SAAClC,GAC/B,MAAO,CAACI,KAAM0B,EAAoB9B,U,+wCCrE/B,IAAMM,EAAOC,IAAOC,IAAV,KASJ2B,EAAe5B,IAAOC,IAAV,KAKZ4B,EAAmB7B,IAAOC,IAAV,KAUhBK,EAAeN,IAAOC,IAAV,KAIZM,EAAWP,IAAOC,IAAV,KAYR6B,EAAY9B,IAAO+B,OAAV,KAYTC,GAAYhC,IAAOI,OAAV,KCpCf,SAAS6B,KAEZ,IAAMvB,EAAWC,cAEjBC,qBAAU,WACNF,EFyCG,CAACb,KAAMyB,MExCX,CAACZ,IANyB,MAQKwB,mBAAS,IARd,mBAQxBC,EARwB,KAQZC,EARY,KAUvBC,EAAiBvB,aAAmC,SAAAC,GAAK,OAC3DA,EAAMuB,sBAAsBd,cAE1Be,EAAqBzB,aAAmC,SAAAC,GAAK,OAAIA,EAAMuB,sBAAsB7C,SAiBnG,OACI,eAAC,EAAD,CAAM+C,UAAU,MAAhB,UACI,cAACZ,EAAD,UACI,eAACC,EAAD,WACI,cAACC,EAAD,CAAWW,SAnBA,SAACC,GAExBhC,EAASiB,EAAmBe,EAAEC,OAAOlD,QACrC2C,EAAcM,EAAEC,OAAOlD,QAgBX,SACK4C,EAAeO,KAAI,SAACF,EAAQG,GACzB,OAAO,wBAAQpD,MAAOiD,EAAf,SAA+BA,GAARG,QAGtC,cAACb,GAAD,CAAWZ,QAlBE,WAErBV,EAASiB,EADM,KAAfQ,EAC4BA,EAAaE,EAAe,GAG5BF,KAapB,wDAGR,cAAC,EAAD,UACI,cAAC,EAAD,UAAWI,GAA0C,qCAAE,qBAAKpB,IAAK,QAASD,IAAKG,IAC3E,gEC5DpB,IACayB,GAA8B,8BAoBrCtD,GAAe,CACjBuD,UAAW,I,+rECtBR,IAAMC,GAAWhD,IAAOiD,MAAV,MAIT,qBAAEC,UAA2B,gBAAkB,yBACrC,qBAAEA,UAA2B,YAAc,eAYpDnD,GAAOC,IAAOC,IAAV,MASJkD,GAAgBnD,IAAOC,IAAV,MAKbM,GAAWP,IAAOC,IAAV,MAKRmD,GAAkBpD,IAAOC,IAAV,MAKfoD,GAAOrD,IAAOC,IAAV,MAQJ+B,GAAYhC,IAAOI,OAAV,MAYTkD,GAActD,IAAOuD,KAAV,MACb,qBAAEC,gBAAuC,YAAc,WAChD,qBAAEC,eAAqC,MAAQ,UAGpDC,GAAiB1D,IAAOC,IAAV,MAId0D,GAAkB3D,IAAOC,IAAV,MAMf2D,GAAkB5D,IAAOC,IAAV,MAKf4D,GAAc7D,IAAOC,IAAV,MAWX6D,GAAY9D,IAAOC,IAAV,MChFhBT,GAAe,CACjBuE,YAAa,G,iICbV,IAAMC,GAAahE,IAAOI,OAAV,MACV,qBAAE6D,aAAiC,QAAU,UCW7CC,GAAkBC,IAAMC,MAAK,SAACC,GAgBvC,IAfA,IAAM3D,EAAWC,cAEX2D,EAAaxD,aAAmC,SAAAC,GAAK,OAAIA,EAAMwD,uBAAuBR,eAExFS,EAAQ,GACRC,EAAa,GACbC,EAAmBL,EAAMK,iBACzBC,EAAoB,EACpBV,GAAe,EATwD,EAYnC/B,mBAAS,GAZ0B,mBAYtE0C,EAZsE,KAYvDC,EAZuD,KAavEC,GAAYF,EAAgB,GAAKF,EAAmB,EACpDK,EAAYH,EAAgBF,EAEvBM,EAAY,EAAGA,GAAKX,EAAMY,KAAKC,OAAQF,IAC5CP,EAAMU,KAAKH,GACXL,EAAYS,KAAKC,KAAKZ,EAAMS,OAASR,GAGzC,IAAK,IAAIM,EAAY,EAAGA,GAAKL,EAAWK,IACpCR,EAAMW,KAAKH,GAYf,OAJIL,GAAaG,GAAYH,GAAaI,IACtCd,GAAe,GAIf,eAACP,GAAD,WACKkB,EAAgB,GAAK,yBAAQxD,QAAS,WACnCyD,EAAiBD,EAAgB,IADf,4BAGtB,cAACjB,GAAD,UACKa,EAAMc,QAAO,SAACC,GACX,GAAIA,GAAKT,GAAYS,GAAKR,EACtB,OAAOQ,KAEZ3C,KAAI,SAAC2C,EAAG1C,GACP,OAAO,cAACS,GAAD,CAEHlC,QAAS,WArBzBV,EFRwB,SAAC8E,GAC7B,MAAO,CAAC3F,KAhCa,mBAgCW2F,QEOnBC,CAsB0BF,IACflB,EAAMqB,WAEVlC,gBAAiBc,GAAciB,EAC/B9B,eAAgBmB,EAAgB,EAP7B,SAQLW,GAPO1C,QAUjB,cAACmB,GAAD,CACI5C,QAAS,WACLyD,EAAiBD,EAAgB,IAErCX,aAAcA,EAJlB,kBAQA,+CC1DC0B,GAAoBxB,IAAMC,MAAK,WAExC,IAAM1D,EAAWC,cAEXsE,EAAOnE,aAAmC,SAAAC,GAAK,OAAIA,EAAM6E,yBAAyB7C,aAClFuB,EAAaxD,aAAmC,SAAAC,GAAK,OAAIA,EAAMwD,uBAAuBR,eAL9C,EAOhB7B,mBAAiB,IAPD,mBAOzC2D,EAPyC,KAO/BC,EAP+B,OAQd5D,oBAAkB,GARJ,mBAQzCgB,EARyC,KAQ9B6C,EAR8B,OA+BlB7D,mBAAS,GA/BS,mBA+BzC8D,EA/ByC,KA+BhCC,EA/BgC,KAgC1CC,EAtBwB,GAsBDF,EAAU,GAAqB,EACtDG,EAvBwB,EAuBDH,EAM3B,OACI,eAAC,GAAD,CAAMxD,UAAU,MAAhB,UAEI,cAACY,GAAD,UACI,eAACC,GAAD,WACI,cAACL,GAAD,CACIoD,QAnBA,WAChBL,EAAa7C,GAAY,IAmBTmD,YAAanD,EAAY,yBAA2B,GACpDA,UAAWA,EACXT,SAAU,SAAC6D,GAAD,OAnCL7G,EAmC4B6G,EAAEC,cAAc9G,WAlCjEqG,EAAYrG,GADQ,IAACA,GAmCoDI,KAAK,SAClE,cAAC,GAAD,CAAWuB,QAhCL,WACD,KAAbyE,EACAE,EAAa7C,GAAY,IAEzBxC,ELGD,CAACb,KAAMiD,GAA6BrD,MKHAoG,IACnCE,EAAa7C,GAAY,KA2BjB,kCAKS,IAAhB+B,EAAKC,OAAe,eAAC/B,GAAD,WACb,cAACe,GAAD,CAAiBe,KAAMA,EACNS,QArBjB,WACZO,EAAW3B,IAqBkBI,iBA9CF,KAiDf,cAACZ,GAAD,UACKmB,EAAKK,QAAO,SAACkB,EAAO3D,GACjB,GAAIA,GAASqD,GAAuBrD,GAASsD,EACzC,OAAOK,KAEZ5D,KAAI,SAAC4D,EAAO3D,GACX,OAAO,eAAC,GAAD,WACH,8BAAM2D,EAAG/G,QACT,uEAFkBoD,WAOhC,cAACe,GAAD,UACE,eAACC,GAAD,WACI,qBAAK1C,IAAK,QAASD,IAAKG,IACxB,6D,yHCzFxB,IAAMtB,GAAOC,IAAOC,IAAV,MAkBKwG,OAVf,WACI,OACI,eAAC,GAAD,WACI,cAAChG,EAAD,IACA,cAACwB,GAAD,IACA,cAAC0D,GAAD,QCNGe,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,sDCPRQ,G,QAAWC,EAAMC,OAAO,CAC1BC,QAAS,oCACTC,iBAAiB,IAIRC,GAAiB,WAEtB,OAAOL,GAASM,IAAT,UACFZ,MAAK,SAACa,GACH,OAAOA,EAAI9H,KAAK+H,aAJnBH,GAAiB,WAQtB,OAAOL,GAASM,IAAT,UACFZ,MAAK,SAACa,GACH,OAAOA,EAAI9H,KAAKH,UAVnB+H,GAAiB,WActB,OAAOL,GAASM,IAAT,cACFZ,MAAK,SAACa,GACH,OAAOA,EAAI9H,SAhBd4H,GAAiB,SAmBVI,GACZ,OAAOT,GAASM,IAAT,0BAA8DG,IAChEf,MAAK,SAACa,GACH,OAAOA,EAAI9H,KAAKH,UAtBnB+H,GAAiB,SAyBXK,GAEX,OADgBV,GAASM,IAAT,uBAAkCI,K,aC9BhDC,I,aAKOC,I,aAIPC,I,aAKOC,IAdjB,SAAUH,KAAV,wEACgB,OADhB,SACsBI,aAAKV,IAD3B,OAEI,OADK5H,EADT,gBAEUuI,aAAIxI,EAAgBC,IAF9B,wCAKO,SAAUmI,KAAV,kEACP,OADO,SACDK,aAAU9I,EAAuBwI,IADhC,wCAIP,SAAUE,KAAV,wEACgB,OADhB,SACsBE,aAAKV,IAD3B,OAEI,OADK5H,EADT,gBAEUuI,aAAIrI,EAAeF,IAF7B,wCAKO,SAAUqI,KAAV,kEACP,OADO,SACDG,aAAU7I,EAAsByI,IAD/B,wC,iBCRGK,I,aAQOC,IARjB,SAAUD,GAA4BE,GAAtC,0EAGiB,OADL9I,EAAU8I,EAAV9I,MAFZ,SAGuByI,cAAK,kBAAKV,GAA8B/H,MAH/D,OAKI,OAFMG,EAHV,gBAKUuI,aV0BC,CAACtI,KAvCkB,wBAuCWkD,UU1BNnD,EAAKA,KAAK4I,SAL7C,wCAQO,SAAUF,KAAV,kEACH,OADG,SACGF,aAAUtF,GAA6BuF,IAD1C,wC,iBCJGI,I,aAKAC,I,aAQOC,I,aAIAC,IAjBjB,SAAUH,KAAV,wEACyC,OADzC,SAC+CP,aAAKV,IADpD,OAEI,OADM5H,EADV,gBAEUuI,aAAI1G,EAAoB7B,IAFlC,wCAKA,SAAU8I,GAAkBH,GAA5B,0EAGiB,OADT9I,EAAU8I,EAAV9I,MAFR,SAGuByI,cAAK,kBAAKV,GAA+B/H,MAHhE,OAKI,OAFMG,EAHV,gBAKUuI,aAAIzG,EAAc9B,IAL5B,wCAQO,SAAU+I,KAAV,kEACH,OADG,SACGP,aAAU9G,EAA2BmH,IADxC,wCAIA,SAAUG,KAAV,kEACH,OADG,SACGR,aAAU7G,EAAoBmH,IADjC,wC,iBC1BUG,IAAV,SAAUA,KAAV,kEACH,OADG,SACGC,aAAI,CAACf,KACPO,KACAK,KACAC,KACAX,OALD,wCCGP,IAAMc,GAAiBC,eAEjBC,GAAcC,aAAgB,CAChClI,kBpBwB6B,WAAoF,IAAnFD,EAAkF,uDAAxDvB,EAAc+I,EAA0C,uCAChH,OAAQA,EAAO1I,MACX,IAAK,kBACD,OAAO,2BACAkB,GADP,IAEItB,MAAO8I,EAAO3I,OAEtB,IAAK,iBACD,OAAO,2BACAmB,GADP,IAEIrB,UAAW6I,EAAO3I,OAE1B,QACI,OAAOmB,IoBpCfuB,sBhB8BiC,WAAoF,IAAnFvB,EAAkF,uDAAxDvB,EAAc+I,EAA0C,uCAEpH,OAAQA,EAAO1I,MACX,IAAK,sBACD,OAAO,2BACAkB,GADP,IAEIS,WAAW,GAAD,mBAAMT,EAAMS,YAAZ,YAA2B+G,EAAO3I,SAEpD,IAAK,eACD,OAAO,2BACAmB,GADP,IAEItB,MAAO8I,EAAO9I,QAEtB,QACI,OAAOsB,IgB3Cf6E,yBbeoC,WAAoF,IAAnF7E,EAAkF,uDAAxDvB,GAAc+I,EAA0C,uCACvH,OAAQA,EAAO1I,MACX,IAAK,wBACD,OAAO,2BACAkB,GADP,IAEIgC,UAAWwF,EAAOxF,YAE1B,QACI,OAAOhC,IatBfwD,uBXKkC,WAAoF,IAAnFxD,EAAkF,uDAAxDvB,GAAc+I,EAA0C,uCAErH,OAAQA,EAAO1I,MACX,IAAK,mBACD,OAAO,2BACAkB,GADP,IAEIgD,YAAawE,EAAO/C,OAE5B,QACI,OAAOzE,MWXNoI,GAAQC,aAAYH,GAAcI,aAAgBN,KAK/DO,OAAOH,MAAQA,GAEfJ,GAAeQ,IAAIV,IChBnBW,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,IAAD,CAAUP,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRQ,SAASC,eAAe,SAM5BlD,O","file":"static/js/main.428f1839.chunk.js","sourcesContent":["const SET_RANDOM_JOKE = 'SET-RANDOM-JOKE'\r\nexport const SET_ASYNC_RANDOM_JOKE = 'SET-ASYNC-RANDOM-JOKE'\r\nconst SET_MAIN_IMAGE = 'SET-MAIN-IMAGE'\r\nexport const SET_ASYNC_MAIN_IMAGE = 'SET-ASYNC-MAIN-IMAGE'\r\n\r\ntype setRandomJokeActionType = {\r\n    type: 'SET-RANDOM-JOKE'\r\n    data: string\r\n}\r\ntype setAsyncRandomJokeActionType = {\r\n    type: 'SET-ASYNC-RANDOM-JOKE'\r\n}\r\ntype setMainImageActionType = {\r\n    type: 'SET-MAIN-IMAGE'\r\n    data: string\r\n}\r\ntype setAsyncMainImageActionType = {\r\n    type: 'SET-ASYNC-MAIN-IMAGE'\r\n}\r\n\r\ntype actionsType = setRandomJokeActionType |\r\n    setAsyncRandomJokeActionType |\r\n    setMainImageActionType |\r\n    setAsyncMainImageActionType\r\n\r\nexport type initialStateType = {\r\n    value: string\r\n    mainImage: string\r\n}\r\n\r\nconst initialState = {\r\n    value: '',\r\n    mainImage: ''\r\n}\r\n\r\nexport const RandomJokeReducer = (state: initialStateType = initialState, action: actionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-RANDOM-JOKE':\r\n            return {\r\n                ...state,\r\n                value: action.data\r\n            }\r\n        case \"SET-MAIN-IMAGE\":\r\n            return {\r\n                ...state,\r\n                mainImage: action.data\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const setRandomJokeAC = (data: any): setRandomJokeActionType => {\r\n    return {type: SET_RANDOM_JOKE, data}\r\n}\r\nexport const setAsyncRandomJokeAC = (): setAsyncRandomJokeActionType => {\r\n    return {type: SET_ASYNC_RANDOM_JOKE}\r\n}\r\nexport const setMainImageAC = (data: string): setMainImageActionType => {\r\n    return {type: SET_MAIN_IMAGE, data}\r\n}\r\nexport const setAsyncMainImageAC = (): setAsyncMainImageActionType => {\r\n    return {type: SET_ASYNC_MAIN_IMAGE}\r\n}\r\n","export default __webpack_public_path__ + \"static/media/arrowLeft.abdec602.gif\";","import styled from 'styled-components'\r\n\r\nexport const Main = styled.div`\r\ndisplay: flex;\r\nwidth: 1200px;\r\nheight: 200px;\r\nborder: 1px solid darkslateblue;\r\nbackground-color: darkslateblue;\r\ntext-align: center;\r\nbox-shadow: 1px 6px 36px 7px;\r\n`\r\nexport const MainImage = styled.div`\r\nwidth: 50px;\r\nheight: 50px;\r\ndisplay: block;\r\nmargin: 0 auto;\r\n`\r\nexport const RandomJokeButton = styled.button`\r\ntext-align: center;\r\nbackground-color: chocolate;\r\nborder-radius: 7px;\r\n:active, \r\n:focus {\r\n    outline: none;\r\n}\r\ncolor: aliceblue;\r\n`\r\nexport const ContentWrap = styled.div`\r\nwidth: 150px;\r\nheight: 200px;\r\nposition: relative;\r\n`\r\nexport const TextJokeWrap = styled.div`\r\nwidth: 1050px;\r\nheight: 200px;\r\nposition: relative;\r\n`\r\nexport const TextJoke = styled.div`\r\nwidth: 1000px;\r\nheight: 20px;\r\ndisplay: table;\r\nposition: absolute;\r\nleft: 0;\r\nright: 0;\r\ntop: 0;\r\nbottom: 0;\r\nmargin: auto;\r\ncolor: aliceblue;\r\n`\r\nexport const ImageButtonWrap = styled.div`\r\nwidth: 150px;\r\nheight: 75px;\r\nposition: absolute;\r\nleft: 0;\r\nright: 0;\r\ntop: 0;\r\nbottom: 0;\r\nmargin: auto;\r\n`","import React, {useEffect} from 'react';\r\nimport './RandomJoke';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\nimport {setAsyncMainImageAC, setAsyncRandomJokeAC} from \"../../Redux/RandomJokeReducer\";\r\nimport arrow from \"../../essets/img/arrowLeft.gif\"\r\nimport {\r\n    Main,\r\n    ContentWrap,\r\n    ImageButtonWrap,\r\n    MainImage,\r\n    RandomJokeButton,\r\n    TextJokeWrap,\r\n    TextJoke\r\n} from \"./styled\";\r\n\r\n\r\nexport function RandomJoke() {\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(setAsyncMainImageAC())\r\n    }, [dispatch])\r\n\r\n\r\n    const setRandomJokeHandle = () => {\r\n        dispatch(setAsyncRandomJokeAC())\r\n    }\r\n\r\n    const joke = useSelector<AppRootStateType, any>(state => state.RandomJokeReducer.value)\r\n    const mainImage = useSelector<AppRootStateType, any>(state => state.RandomJokeReducer.mainImage)\r\n\r\n    return (\r\n        <Main>\r\n            <ContentWrap>\r\n                <ImageButtonWrap>\r\n                    <MainImage as='img' src={mainImage} alt=\"mainImage\"/>\r\n                    <RandomJokeButton onClick={setRandomJokeHandle}>Random Joke</RandomJokeButton>\r\n                </ImageButtonWrap>\r\n            </ContentWrap>\r\n            <TextJokeWrap>\r\n                <TextJoke>{joke ? joke : <><img src={arrow}/><div>Click the button</div></>}</TextJoke>\r\n            </TextJokeWrap>\r\n        </Main>\r\n    );\r\n}\r\n\r\n","import {CategoriesResponseType} from \"../api/api\";\r\n\r\nconst SET_JOKE_CATEGORIES = 'SET-JOKE-CATEGORIES'\r\nexport const SET_ASYNC_JOKE_CATEGORIES = 'SET-ASYNC-JOKE-CATEGORIES'\r\nconst SET_CATEGORY = 'SET-CATEGORY'\r\nexport const SET_ASYNC_CATEGORY = 'SET-ASYNC-CATEGORY'\r\n\r\ntype setJokeCategoriesActionType = {\r\n    type: 'SET-JOKE-CATEGORIES'\r\n    data: any\r\n}\r\n\r\ntype setAsyncJokeCategoriesActionType = {\r\n    type: 'SET-ASYNC-JOKE-CATEGORIES'\r\n}\r\n\r\ntype setCategoryActionType = {\r\n    type: 'SET-CATEGORY'\r\n    value: string\r\n}\r\n\r\ntype setAsyncCategoryActionType = {\r\n    type: 'SET-ASYNC-CATEGORY'\r\n    value: string\r\n}\r\n\r\ntype actionsType = setJokeCategoriesActionType |\r\n    setAsyncJokeCategoriesActionType |\r\n    setCategoryActionType |\r\n    setAsyncCategoryActionType\r\n\r\nexport type initialStateType = {\r\n    categories: Array<string>\r\n    value: string\r\n}\r\n\r\nconst initialState = {\r\n    categories: [],\r\n    value: ''\r\n}\r\n\r\n\r\nexport const JokeCategoriesReducer = (state: initialStateType = initialState, action: actionsType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-JOKE-CATEGORIES':\r\n            return {\r\n                ...state,\r\n                categories: [...state.categories, ...action.data]\r\n            }\r\n        case 'SET-CATEGORY':\r\n            return {\r\n                ...state,\r\n                value: action.value\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const setJokeCategoriesAC = (data: CategoriesResponseType): setJokeCategoriesActionType => {\r\n    return {type: SET_JOKE_CATEGORIES, data}\r\n}\r\nexport const setAsyncJokeCategoriesAC = (): setAsyncJokeCategoriesActionType => {\r\n    return {type: SET_ASYNC_JOKE_CATEGORIES}\r\n}\r\nexport const setCategoryAC = (value: string): setCategoryActionType => {\r\n\r\n    return {type: SET_CATEGORY, value}\r\n}\r\nexport const setAsyncCategoryAC = (value: string): setAsyncCategoryActionType => {\r\n    return {type: SET_ASYNC_CATEGORY, value}\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const Main = styled.div`\r\ndisplay: flex;\r\nwidth:1200px;\r\nheight: 300px;\r\nmargin: 0 auto;\r\nbackground-color: darkslateblue;\r\nborder: 1px solid darkslateblue;\r\nbox-shadow: 1px 6px 36px 7px;\r\n`\r\nexport const SelectButton = styled.div`\r\nwidth: 200px;\r\nheight: 300px;\r\nposition: relative;\r\n`\r\nexport const SelectButtonWrap = styled.div`\r\nwidth: 200px;\r\nheight: 66px;\r\nposition: absolute;\r\nleft: 0;\r\nright: 0;\r\ntop: 0;\r\nbottom: 0;\r\nmargin: auto;\r\n`\r\nexport const TextJokeWrap = styled.div`\r\nwidth: 1000px;\r\nposition: relative;\r\n`\r\nexport const TextJoke = styled.div`\r\nwidth: 900px;\r\nheight: 20px;\r\ntext-align: center;\r\nposition: absolute;\r\nleft: 0;\r\nright: 0;\r\ntop: 0;\r\nbottom: 0;\r\nmargin: auto;\r\ncolor: aliceblue;\r\n`\r\nexport const NewSelect = styled.select`\r\ndisplay: block;\r\nwidth: 100px;\r\nheight: 30px;\r\nfont-size: 17px;\r\nmargin: 0 auto;\r\nbackground-color: aliceblue;\r\nborder-radius: 10px;\r\n:active, \r\n:focus {\r\n    outline: none;\r\n`\r\nexport const NewButton = styled.button`\r\nborder-radius: 10px;\r\nbackground-color: chocolate;\r\ncolor: aliceblue;\r\n:active, \r\n:focus {\r\n    outline: none;\r\n}\r\n`","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\nimport {\r\n    setAsyncCategoryAC,\r\n    setAsyncJokeCategoriesAC,\r\n} from \"../../Redux/JokeCategoriesReducer\";\r\nimport arrow from \"../../essets/img/arrowLeft.gif\";\r\nimport {\r\n    Main,\r\n    SelectButton,\r\n    SelectButtonWrap,\r\n    NewButton,\r\n    TextJokeWrap,\r\n    TextJoke,\r\n    NewSelect\r\n} from \"./styled\";\r\n\r\nexport function JokeCategories() {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(setAsyncJokeCategoriesAC())\r\n    }, [dispatch])\r\n\r\n    let [currentCat, setCurrentCat] = useState('')\r\n\r\n    const jokeCategories = useSelector<AppRootStateType, any>(state =>\r\n        state.JokeCategoriesReducer.categories)\r\n\r\n    const jokeAccordingToCat = useSelector<AppRootStateType, any>(state => state.JokeCategoriesReducer.value)\r\n\r\n    const getCurrentCategory = (c: ChangeEvent<HTMLSelectElement>) => {\r\n\r\n        dispatch(setAsyncCategoryAC(c.target.value))\r\n        setCurrentCat(c.target.value)\r\n    }\r\n\r\n    const changeJokeOfCategory = () => {\r\n        if (currentCat === '') {\r\n            dispatch(setAsyncCategoryAC(currentCat = jokeCategories[0]))\r\n            // setCurrentCat(currentCat = jokeCategories[0])\r\n        } else {\r\n            dispatch(setAsyncCategoryAC(currentCat))\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Main className=\"App\">\r\n            <SelectButton>\r\n                <SelectButtonWrap>\r\n                    <NewSelect onChange={getCurrentCategory}>\r\n                        {jokeCategories.map((c: any, index: number) => {\r\n                            return <option value={c} key={index}>{c}</option>\r\n                        })}\r\n                    </NewSelect>\r\n                    <NewButton onClick={changeJokeOfCategory}>Enjoy by other jokes of this category</NewButton>\r\n                </SelectButtonWrap>\r\n            </SelectButton>\r\n            <TextJokeWrap>\r\n                <TextJoke>{jokeAccordingToCat ? jokeAccordingToCat : <><img alt={'arrow'} src={arrow}/>\r\n                    <div>Choose the category</div>\r\n                </>}</TextJoke>\r\n            </TextJokeWrap>\r\n        </Main>\r\n    );\r\n}\r\n\r\n","import {r} from \"../api/api\";\r\n\r\nconst SET_FREE_ENTERED_TEXT = 'SET-FREE-ENTERED-TEXT'\r\nexport const SET_FREE_ENTERED_ASYNC_TEXT = 'SET-FREE-ENTERED-ASYNC-TEXT'\r\n\r\ntype setFreeEnteredTextActionType = {\r\n    type: 'SET-FREE-ENTERED-TEXT'\r\n    jokesList: Array<r>\r\n}\r\n\r\ntype setFreeEnteredAsyncTextActionType = {\r\n    type: 'SET-FREE-ENTERED-ASYNC-TEXT'\r\n    value: string\r\n}\r\n\r\ntype actionsType = setFreeEnteredTextActionType |\r\n    setFreeEnteredAsyncTextActionType\r\n\r\n\r\nexport type initialStateType = {\r\n    jokesList: Array<r>\r\n}\r\n\r\nconst initialState = {\r\n    jokesList: []\r\n}\r\n\r\n\r\nexport const FreeTextSearchingReducer = (state: initialStateType = initialState, action: actionsType): initialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-FREE-ENTERED-TEXT':\r\n            return {\r\n                ...state,\r\n                jokesList: action.jokesList,\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const setFreeEnteredTextAC = (jokesList: Array<r>): setFreeEnteredTextActionType => {\r\n    return {type: SET_FREE_ENTERED_TEXT, jokesList}\r\n}\r\nexport const setFreeEnteredAsyncTextAC = (value: string): setFreeEnteredAsyncTextActionType => {\r\n    return {type: SET_FREE_ENTERED_ASYNC_TEXT, value}\r\n}\r\n\r\n\r\n// export const setFreeEnteredTextTC = (text: string) => {\r\n//     return (dispatch: Dispatch) => {\r\n//         randomJokesAPI.searchFreeText(text)\r\n//             .then((res) => {\r\n//                 dispatch(setFreeEnteredTextAC(res.data))\r\n//             })\r\n//     }\r\n// }","import styled from 'styled-components'\r\n\r\nexport const NewInput = styled.input<{ showError: boolean }>`\r\n  width: 170px;\r\n  height: 30px;\r\n  border-radius: 10px;\r\n  border: ${({showError}) => showError ? '4px solid red' : '1px solid aliceblue'};\r\n  background-color: ${({showError}) => showError ? 'mistyrose' : 'aliceblue'};\r\n  :active,\r\n  :focus {\r\n    outline: none;\r\n  }\r\n  ::placeholder {\r\n    color: red;\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n    opacity: 0.5;\r\n  }\r\n`\r\nexport const Main = styled.div`\r\n  display: flex;\r\n  width: 1200px;\r\n  min-height: 100%;\r\n  margin: 0 auto;\r\n  background-color: darkslateblue;\r\n  border: 1px solid darkslateblue;\r\n  box-shadow: 1px 6px 36px 7px;\r\n`\r\nexport const TextJokesWrap = styled.div`\r\n  width: 1000px;\r\n  color: aliceblue;\r\n  margin-top: 40px;\r\n`\r\nexport const TextJoke = styled.div`\r\n  width: 900px;\r\n  text-align: center;\r\n  padding: 10px;\r\n`\r\nexport const InputButtonWrap = styled.div`\r\n  width: 200px;\r\n  height: 100%;\r\n  position: relative;\r\n`\r\nexport const Wrap = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  right: 0;\r\n  top: 117px;\r\n  bottom: 0;\r\n  margin: auto;\r\n`\r\nexport const NewButton = styled.button`\r\n  text-align: center;\r\n  background-color: chocolate;\r\n  border-radius: 7px;\r\n  :active,\r\n  :focus {\r\n    outline: none;\r\n  }\r\n  color: aliceblue;\r\n  margin: 0 auto;\r\n`\r\n\r\nexport const PageNumbers = styled.span<{isNumberClicked: boolean, isFirstPortion: boolean}>`\r\n  color: ${({isNumberClicked}) => isNumberClicked ? 'chocolate' : 'white'};;\r\n  margin-right: ${({isFirstPortion}) => isFirstPortion ? '5px' : '13px'};;\r\n  cursor: pointer;\r\n`\r\nexport const PaginationWrap = styled.div`\r\n  display: flex;\r\n  position: relative;\r\n`\r\nexport const PageNumbersWrap = styled.div`\r\n  width: 223px;\r\n  height: 20px;\r\n  position: absolute;\r\n  left: 42px;\r\n`\r\nexport const MovingArrowWrap = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  position: relative;\r\n`\r\nexport const MovingArrow = styled.div`\r\n  width: 150px;\r\n  height: 100px;\r\n  color: aliceblue;\r\n  left: 0;\r\n  right: 0;\r\n  top: 117px;\r\n  bottom: 0;\r\n  margin: 0 auto;\r\n  position: absolute;\r\n`\r\nexport const JokesWrap = styled.div`\r\n  height: 100%;\r\n  margin-top: 64px;\r\n`","\r\nconst SET_CURRENT_PAGE = 'SET-CURRENT-PAGE'\r\n\r\ntype setCurrentPageActionType = {\r\n    type: 'SET-CURRENT-PAGE'\r\n    page: number\r\n}\r\n\r\ntype actionsType = setCurrentPageActionType\r\n\r\nexport type initialStateType = {\r\n    currentPage: number\r\n}\r\n\r\nconst initialState = {\r\n    currentPage: 1\r\n}\r\n\r\n\r\nexport const PaginationPagesReducer = (state: initialStateType = initialState, action: actionsType): initialStateType => {\r\n\r\n    switch (action.type) {\r\n        case 'SET-CURRENT-PAGE':\r\n            return {\r\n                ...state,\r\n                currentPage: action.page\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nexport const setCurrentPageAC = (page: number): setCurrentPageActionType => {\r\n    return {type: SET_CURRENT_PAGE, page}\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const ButtonNext = styled.button<{ isShowButton: boolean }>`\r\n  display: ${({isShowButton}) => isShowButton ? 'block' : 'none'};\r\n  position: absolute;\r\n  left: 268px;\r\n`\r\n","import React, {useState} from 'react';\r\nimport {PageNumbers, PaginationWrap, PageNumbersWrap} from \"../FreeTextSearching/styled\";\r\nimport {setCurrentPageAC} from \"../../Redux/PaginationPagesReducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {ButtonNext} from \"./styled\";\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\n\r\n\r\ntype PaginationPagesPropsType = {\r\n    list: []\r\n    getPage: () => void\r\n    portionPagesSize: number\r\n}\r\n\r\nexport const PaginationPages = React.memo((props: PaginationPagesPropsType) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const pageNumber = useSelector<AppRootStateType, any>(state => state.PaginationPagesReducer.currentPage)\r\n\r\n    let pages = []\r\n    let total: any = []\r\n    let portionPagesSize = props.portionPagesSize\r\n    let pageCount: number = 0\r\n    let isShowButton = true\r\n\r\n    // edges of pagination portions\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftEdge = (portionNumber - 1) * portionPagesSize + 1\r\n    let rightEdge = portionNumber * portionPagesSize\r\n\r\n    for (let i: number = 0; i <= props.list.length; i++) {\r\n        total.push(i)\r\n        pageCount = Math.ceil(total.length / portionPagesSize)\r\n    }\r\n\r\n    for (let i: number = 1; i <= pageCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    const getCurrentPage = (page: number) => {\r\n        dispatch(setCurrentPageAC(page))\r\n    }\r\n\r\n    //hide button (next) in last page portion\r\n    if (pageCount >= leftEdge && pageCount <= rightEdge) {\r\n        isShowButton = false\r\n    }\r\n\r\n    return (\r\n        <PaginationWrap>\r\n            {portionNumber > 1 && <button onClick={() => {\r\n                setPortionNumber(portionNumber - 1)\r\n            }}> {`prev`} </button>}\r\n            <PageNumbersWrap>\r\n                {pages.filter((p) => {\r\n                    if (p >= leftEdge && p <= rightEdge) {\r\n                        return p\r\n                    }\r\n                }).map((p, index) => {\r\n                    return <PageNumbers\r\n                        key={index}\r\n                        onClick={() => {\r\n                            getCurrentPage(p)\r\n                            props.getPage()\r\n                        }}\r\n                        isNumberClicked={pageNumber == p}\r\n                        isFirstPortion={portionNumber > 1}\r\n                    >{p}</PageNumbers>\r\n                })}\r\n            </PageNumbersWrap>\r\n            <ButtonNext\r\n                onClick={() => {\r\n                    setPortionNumber(portionNumber + 1)\r\n                }}\r\n                isShowButton={isShowButton}\r\n            >\r\n                {`next`}\r\n            </ButtonNext>\r\n            <div>dfdfdf</div>\r\n        </PaginationWrap>\r\n    )\r\n})","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../Redux/store\";\r\nimport {setFreeEnteredAsyncTextAC} from \"../../Redux/FreeTextSearchingReducer\";\r\nimport {r} from \"../../api/api\";\r\nimport {\r\n    NewInput,\r\n    Main,\r\n    TextJokesWrap,\r\n    TextJoke,\r\n    InputButtonWrap,\r\n    Wrap,\r\n    NewButton,\r\n    MovingArrow,\r\n    MovingArrowWrap,\r\n    JokesWrap\r\n} from \"./styled\";\r\nimport arrow from \"../../essets/img/arrowLeft.gif\";\r\nimport {PaginationPages} from \"../PaginationPages/PaginationPages\";\r\n\r\nexport const FreeTextSearching = React.memo(() => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const list = useSelector<AppRootStateType, any>(state => state.FreeTextSearchingReducer.jokesList)\r\n    const pageNumber = useSelector<AppRootStateType, any>(state => state.PaginationPagesReducer.currentPage)\r\n\r\n    let [freeText, setFreeText] = useState<string>('')\r\n    let [showError, setShowError] = useState<boolean>(false)\r\n\r\n    let amountOfItems: number = 5\r\n    let portionPagesSize: number = 10\r\n\r\n    const FreeTextHandler = (value: string) => {\r\n        setFreeText(value)\r\n    }\r\n\r\n    const submitHandler = () => {\r\n        if (freeText === '') {\r\n            setShowError(showError = true)\r\n        } else {\r\n            dispatch(setFreeEnteredAsyncTextAC(freeText))\r\n            setShowError(showError = false)\r\n        }\r\n    }\r\n\r\n    const setErrorOff = () => {\r\n        setShowError(showError = false)\r\n    }\r\n\r\n    //edges of jokes portions\r\n    let [pageNum, setPageNum] = useState(1)\r\n    let leftEdgeJokePortion = (pageNum - 1) * amountOfItems + 1\r\n    let rightEdgeJokePortion = pageNum * amountOfItems\r\n\r\n    const getPage = () => {\r\n        setPageNum(pageNumber)\r\n    }\r\n\r\n    return (\r\n        <Main className=\"App\">\r\n            {/*input-button block*/}\r\n            <InputButtonWrap>\r\n                <Wrap>\r\n                    <NewInput\r\n                        onFocus={setErrorOff}\r\n                        placeholder={showError ? 'Please write something' : ''}\r\n                        showError={showError}\r\n                        onChange={(e) => FreeTextHandler(e.currentTarget.value)} type=\"text\"/>\r\n                    <NewButton onClick={submitHandler}>{`Enter some Text`}</NewButton>\r\n                </Wrap>\r\n            </InputButtonWrap>\r\n            {/*-----------------------------------------------------------------------------------------------------------------*/}\r\n            {/*pagination block*/}\r\n            {list.length !== 0 ? <TextJokesWrap>\r\n                    <PaginationPages list={list}\r\n                                     getPage={getPage}\r\n                                     portionPagesSize={portionPagesSize}/>\r\n                    {/*-------------------------------------------------------------------------------------------------------------------------*/}\r\n                    {/*text-jokes block*/}\r\n                    <JokesWrap>\r\n                        {list.filter((el: r, index: number) => {\r\n                            if (index >= leftEdgeJokePortion && index <= rightEdgeJokePortion) {\r\n                                return el\r\n                            }\r\n                        }).map((el: r, index: number) => {\r\n                            return <TextJoke key={index}>\r\n                                <div>{el.value}</div>\r\n                                <div>----------------------------------</div>\r\n                            </TextJoke>\r\n                        })}\r\n                    </JokesWrap>\r\n                </TextJokesWrap>\r\n                : <MovingArrowWrap>\r\n                    <MovingArrow>\r\n                        <img alt={'arrow'} src={arrow}/>\r\n                        <div>Enter some text</div>\r\n                    </MovingArrow>\r\n                </MovingArrowWrap>}\r\n        </Main>\r\n    );\r\n}\r\n)","import React from 'react';\r\nimport './App.css';\r\nimport {RandomJoke} from \"./Conponents/RandomJoke/RandomJoke\";\r\nimport {JokeCategories} from \"./Conponents/JokeCategories/JokeCategories\";\r\nimport {FreeTextSearching} from \"./Conponents/FreeTextSearching/FreeTextSearching\";\r\nimport styled from \"styled-components\"\r\n\r\nconst Main = styled.div`\r\nwidth:1200px;\r\nheight: 500px;\r\nmargin: 0 auto;\r\n`\r\n\r\n\r\n\r\nfunction App() {\r\n    return (\r\n        <Main>\r\n            <RandomJoke/>\r\n            <JokeCategories/>\r\n            <FreeTextSearching/>\r\n        </Main>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://api.chucknorris.io/jokes/',\r\n    withCredentials: true\r\n});\r\n\r\n\r\nexport const randomJokesAPI = {\r\n    getImage() {\r\n        return instance.get<RandomJokeResponseType>(`random`)\r\n            .then((res) => {\r\n                return res.data.icon_url\r\n            })\r\n    },\r\n    getRandomJoke() {\r\n        return instance.get<RandomJokeResponseType>(`random`)\r\n            .then((res) => {\r\n                return res.data.value\r\n            })\r\n    },\r\n    getJokeCategories() {\r\n        return instance.get<CategoriesResponseType>(`categories`)\r\n            .then((res) => {\r\n                return res.data\r\n            })\r\n    },\r\n    getJokeCategory(category: string) {\r\n        return instance.get<getJokeCategorieResponseType>(`random?category=${category}`)\r\n            .then((res) => {\r\n                return res.data.value\r\n            })\r\n    },\r\n    searchFreeText(text: string) {\r\n        const promise = instance.get<r[]>(`search?query=${text}`)\r\n        return promise\r\n    }\r\n};\r\n\r\n\r\ntype RandomJokeResponseType = {\r\n    \"categories\": [],\r\n    \"created_at\": string,\r\n    \"icon_url\": string,\r\n    \"id\": string,\r\n    \"updated_at\": string,\r\n    \"url\": string,\r\n    \"value\": string\r\n}\r\n\r\nexport type CategoriesResponseType = {\r\n    data:Array<string>\r\n}\r\n\r\ntype getJokeCategorieResponseType = {\r\n    value: string\r\n}\r\n\r\n\r\nexport type r = {\r\n    created_at: string\r\n    icon_url: string\r\n    id: string\r\n    updated_at: string\r\n    url: string\r\n    value: string\r\n}","import {randomJokesAPI} from \"../api/api\";\r\nimport {put, call, takeEvery} from \"redux-saga/effects\"\r\nimport {SET_ASYNC_MAIN_IMAGE, SET_ASYNC_RANDOM_JOKE, setMainImageAC, setRandomJokeAC} from \"../Redux/RandomJokeReducer\";\r\n\r\nfunction* randomJokeWorker() {\r\n   const data = yield call(randomJokesAPI.getRandomJoke)\r\n    yield put(setRandomJokeAC(data))\r\n}\r\n\r\nexport function* randomJokeWatcher() {\r\nyield takeEvery(SET_ASYNC_RANDOM_JOKE, randomJokeWorker)\r\n}\r\n\r\nfunction* mainImageWorker() {\r\n   const data = yield call(randomJokesAPI.getImage)\r\n    yield put(setMainImageAC(data))\r\n}\r\n\r\nexport function* mainImageWatcher() {\r\nyield takeEvery(SET_ASYNC_MAIN_IMAGE, mainImageWorker)\r\n}","import {randomJokesAPI} from \"../api/api\";\r\nimport {put, call, takeEvery} from \"redux-saga/effects\"\r\nimport {SET_FREE_ENTERED_ASYNC_TEXT, setFreeEnteredTextAC} from '../Redux/FreeTextSearchingReducer'\r\n\r\n\r\ntype WorkerActionType = {\r\n    type: string\r\n    value: string\r\n}\r\n\r\nfunction* FreeTextSearchingSagaWorker(action: WorkerActionType) {\r\n\r\n    const { value } = action;\r\n    const data = yield call(()=> randomJokesAPI.searchFreeText(value))\r\n\r\n    yield put(setFreeEnteredTextAC(data.data.result))\r\n}\r\n\r\nexport function* FreeTextSearchingSagaWatcher() {\r\n    yield takeEvery(SET_FREE_ENTERED_ASYNC_TEXT, FreeTextSearchingSagaWorker)\r\n}\r\n","import {CategoriesResponseType, randomJokesAPI} from \"../api/api\";\r\nimport {put, call, takeEvery} from \"redux-saga/effects\"\r\nimport {\r\n    SET_ASYNC_CATEGORY,\r\n    SET_ASYNC_JOKE_CATEGORIES,\r\n    setCategoryAC,\r\n    setJokeCategoriesAC\r\n} from \"../Redux/JokeCategoriesReducer\";\r\n\r\ntype SetCategoryWorkerActionType = {\r\n    type: string\r\n    value: string\r\n}\r\n\r\nfunction* JokeCategoriesWorker() {\r\n    const data: CategoriesResponseType = yield call(randomJokesAPI.getJokeCategories)\r\n    yield put(setJokeCategoriesAC(data))\r\n}\r\n\r\nfunction* SetCategoryWorker(action: SetCategoryWorkerActionType) {\r\n\r\nconst { value } = action;\r\n    const data = yield call(()=> randomJokesAPI.getJokeCategory(value))\r\n\r\n    yield put(setCategoryAC(data))\r\n}\r\n\r\nexport function* JokeCategoriesWatcher() {\r\n    yield takeEvery(SET_ASYNC_JOKE_CATEGORIES, JokeCategoriesWorker)\r\n}\r\n\r\nexport function* SetCategoryWatcher() {\r\n    yield takeEvery(SET_ASYNC_CATEGORY, SetCategoryWorker)\r\n}","import {all} from \"redux-saga/effects\"\r\nimport {mainImageWatcher, randomJokeWatcher} from \"./RandomJokeSaga\";\r\nimport {FreeTextSearchingSagaWatcher} from \"./FreeTextSearchingSaga\";\r\nimport {JokeCategoriesWatcher, SetCategoryWatcher} from \"./JokeCategoriesSaga\";\r\n\r\nexport function* rootWatcher() {\r\n    yield all([randomJokeWatcher(),\r\n        FreeTextSearchingSagaWatcher(),\r\n        JokeCategoriesWatcher(),\r\n        SetCategoryWatcher(),\r\n        mainImageWatcher()])\r\n}","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {RandomJokeReducer} from \"./RandomJokeReducer\";\r\nimport {JokeCategoriesReducer} from \"./JokeCategoriesReducer\";\r\nimport {FreeTextSearchingReducer} from \"./FreeTextSearchingReducer\";\r\nimport createSagaMiddleware from 'redux-saga'\r\nimport {rootWatcher} from \"../saga\";\r\nimport {PaginationPagesReducer} from \"./PaginationPagesReducer\";\r\n\r\nconst sagaMiddleware = createSagaMiddleware()\r\n\r\nconst rootReducer = combineReducers({\r\n    RandomJokeReducer: RandomJokeReducer,\r\n    JokeCategoriesReducer: JokeCategoriesReducer,\r\n    FreeTextSearchingReducer: FreeTextSearchingReducer,\r\n    PaginationPagesReducer: PaginationPagesReducer\r\n})\r\n\r\nexport const store = createStore(rootReducer,  applyMiddleware(sagaMiddleware));\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nsagaMiddleware.run(rootWatcher)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./Redux/store\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}